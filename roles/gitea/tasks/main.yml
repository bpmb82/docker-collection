---
# tasks file for gitea
- name: Create user 'git' and add to docker group
  ansible.builtin.user:
    name: git
    create_home: true
  register: git_user

- name: Create SSH keys for user git
  ansible.builtin.shell: sudo -u git ssh-keygen -t ecdsa -b 4096 -C "Gitea Host Key"

- name: Add SSH keys to authorized_keys
  ansible.builtin.shell: sudo -u git cat /home/git/.ssh/id_rsa.pub | sudo -u git tee -a /home/git/.ssh/authorized_keys

- name: Set permissions on file
  ansible.builtin.shell: sudo -u git chmod 600 /home/git/.ssh/authorized_keys

- name: Create gitea script on host
  ansible.builtin.copy:
    src: templates/gitea
    dest: /usr/local/bin/gitea
    mode: '0755'

- name: Create config and database folder
  ansible.builtin.file:
    path: "{{ workdir }}/{{ service }}/{{ item }}"
    recurse: true
    state: directory
    mode: '0777'
    owner: git
  loop: ["config", "database"]

- name: Create data folder
  ansible.builtin.file:
    path: "{{ download_dir }}/{{ service }}/data/git"
    recurse: true
    state: directory
    mode: '0777'
    owner: git

- name: Copy {{ service }} docker-compose jinja template
  ansible.builtin.template:
    src: templates/docker-compose.yml.j2
    dest: "{{ workdir }}/{{ service }}/docker-compose.yml"
    mode: '0644'

- name: Deploy {{ service }} if swarm mode is enabled
  block:
      
    - name: Deploy {{ service }}
      ansible.builtin.shell: docker stack deploy -c {{ workdir }}/{{ service }}/docker-compose.yml {{ service }}

    - name: Wait until {{ service }} is running
      ansible.builtin.shell: docker stack services --filter name={{ service }}_{{ service }} {{ service }} | grep -c 1/1 || /bin/true
      register: service_running
      until: service_running.stdout == "1"
      retries: 40
      delay: 20

  when: swarm == true

- name: Deploy {{ service }}
  block:

    - name: Deploy {{ service }}
      ansible.builtin.shell: docker compose -f {{ workdir }}/{{ service }}/docker-compose.yml up -d

    - name: Wait until {{ service }} is running
      ansible.builtin.shell: docker inspect {{ service }}-{{service }}-1 | jq '.[] | .State.Status'
      register: service_running
      until: service_running.stdout == '"running"'
      retries: 40
      delay: 20

  when: swarm == false