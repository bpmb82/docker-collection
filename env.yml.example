# Environment file

# Use this file to quickly deploy without all the prompts

# Global vars

# workdir: This is the location where all the docker files and data of the containers will reside
workdir: "/docker"

# domain: The domain every service will be used with as subdomains (e.g. sabnzbd.example.com, homeassistant.example.com, etc)
domain: "example.com"

# swarm: Experimental, enables docker swarm and tries to deploy everything in separate stacks
swarm: false

## Traefik

# This variable determines if Traefik will be deployed or not 
# NOTE: All other services assume Traefik will be up and running, use this only to deploy services to an already running Traefik environment
traefik: true

# application: This is the name of the network, e.g. 'proxy' will become 'proxy_network'
application: "proxy"

# provider: Traefik supports DNS challenges for Letsencrypt, this playbook supports 'azuredns' and 'cloudflare' providers. You can also set it to 'none'
# and fill out the cert_key and cert_pem variables
provider: "cloudflare"

# cert_key and cert_pem: If you want to use your own certificates, paste their content in these variables. 
# cert_key holds the private key, cert_pem the certificate
# cert_key: 
# cert_pem:

# Azure provider credentials, use when provider is 'azuredns'
# AZURE_CLIENT_ID:
# AZURE_SECRET:
# AZURE_SUBSCRIPTION_ID:
# AZURE_TENANT:

# Cloudflare provider credentials, use when provider is 'cloudflare'
CF_API_EMAIL: "someone@example.com"
CF_API_KEY: "cf-api-token"
CF_DNS_API_TOKEN: "cf-dns-api-token"

# Email address to use for letsencrypt
email_address: "someone@example.com"

# local_host: A map of external services you want to link to Traefik. E.g. a service running on the host (192.168.1.250) on port 10000
# local_host:
#   service_name:
#     address: 192.168.1.250
#     port: 10000

## Sabnzbd

# This variable determines if Sabnzbd will be deployed or not
sabnzbd: true

# download_dir: Point this to the directory where you keep your downloads. This same location will be mounted in any *arr container as well.
# It is recommended to mount the downloads and media folder in the same local dir and then mount that into the container
# (e.g. local_dir/downloads and local_dir/movies and then mount /local_dir)
download_dir: "/downloads"

## Sonarr

# This variable determines if Sonarr will be deployed or not
sonarr: true

## Radarr

# This variable determines if Radarr will be deployed or not
radarr: true

## Home Assistant

# This variable determines if Home Assistant will be deployed or not
homeassistant: true

# tty: Map of tty devices to mount (will be mounted under the same name inside container).
# Example: 
# tty:
#   device1:
#     path: "/dev/ttyUSB0"
tty:
  rfxcom:
    path: "/dev/tty0"

# wolpipe: A map of device and mac addresses that we can turn on using Wake on LAN. A named pipe will be created on the host
# and a systemd service will be running. This allows us to avoid using Host networking while still being able to use WOL.
# Example:
# wolpipe:
#   pc1:
#     mac: "xx:yy:zz:aa:bb"

## Emby

# This variable determines if Emby will be deployed or not
emby: true

## Jellyfin

# This variable determines if Jellyfin will be deployed or not
jellyfin: true

## wg-easy

# This variable determines if wg-easy will be deployed or not
wireguard: true

# wg_host: Set to the public address or hostname of your instance
wg_host: 

# wg_pass: Password to use for the web frontend
wg_pass: 

# wg_default_address: IP range of the wireguard clients
wg_default_address: "10.8.0.x"

# wg_default_dns: DNS server to use
wg_default_dns: "1.1.1.1"

# wg_allowed_ips: IP ranges clients are allows to access
wg_allowed_ips: "10.8.0.0/24, 192.168.1.0/24"